// Code generated by sqlc. DO NOT EDIT.
// versions:
//   sqlc v1.22.0
// source: feed_follows.sql

package database

import (
	"context"
	"time"
)

const createFeedFollow = `-- name: CreateFeedFollow :exec
INSERT INTO feed_follows (
  created_at, updated_at, user_id, feed_id
) VALUES (
  ?, ?, ?, ?
)
`

type CreateFeedFollowParams struct {
	CreatedAt time.Time
	UpdatedAt time.Time
	UserID    int32
	FeedID    int32
}

// type: CreateFeedFollow
func (q *Queries) CreateFeedFollow(ctx context.Context, arg CreateFeedFollowParams) error {
	_, err := q.db.ExecContext(ctx, createFeedFollow,
		arg.CreatedAt,
		arg.UpdatedAt,
		arg.UserID,
		arg.FeedID,
	)
	return err
}

const deleteFeedFollow = `-- name: DeleteFeedFollow :exec
DELETE FROM feed_follows WHERE id=? AND user_id=?
`

type DeleteFeedFollowParams struct {
	ID     int32
	UserID int32
}

func (q *Queries) DeleteFeedFollow(ctx context.Context, arg DeleteFeedFollowParams) error {
	_, err := q.db.ExecContext(ctx, deleteFeedFollow, arg.ID, arg.UserID)
	return err
}

const getFeedFollowByFeed = `-- name: GetFeedFollowByFeed :many
SELECT id, created_at, updated_at, user_id, feed_id FROM feed_follows WHERE feed_id=?
`

func (q *Queries) GetFeedFollowByFeed(ctx context.Context, feedID int32) ([]FeedFollow, error) {
	rows, err := q.db.QueryContext(ctx, getFeedFollowByFeed, feedID)
	if err != nil {
		return nil, err
	}
	defer rows.Close()
	var items []FeedFollow
	for rows.Next() {
		var i FeedFollow
		if err := rows.Scan(
			&i.ID,
			&i.CreatedAt,
			&i.UpdatedAt,
			&i.UserID,
			&i.FeedID,
		); err != nil {
			return nil, err
		}
		items = append(items, i)
	}
	if err := rows.Close(); err != nil {
		return nil, err
	}
	if err := rows.Err(); err != nil {
		return nil, err
	}
	return items, nil
}

const getFeedFollowByUser = `-- name: GetFeedFollowByUser :many
SELECT id, created_at, updated_at, user_id, feed_id FROM feed_follows WHERE user_id=?
`

func (q *Queries) GetFeedFollowByUser(ctx context.Context, userID int32) ([]FeedFollow, error) {
	rows, err := q.db.QueryContext(ctx, getFeedFollowByUser, userID)
	if err != nil {
		return nil, err
	}
	defer rows.Close()
	var items []FeedFollow
	for rows.Next() {
		var i FeedFollow
		if err := rows.Scan(
			&i.ID,
			&i.CreatedAt,
			&i.UpdatedAt,
			&i.UserID,
			&i.FeedID,
		); err != nil {
			return nil, err
		}
		items = append(items, i)
	}
	if err := rows.Close(); err != nil {
		return nil, err
	}
	if err := rows.Err(); err != nil {
		return nil, err
	}
	return items, nil
}
