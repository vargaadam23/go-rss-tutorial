// Code generated by sqlc. DO NOT EDIT.
// versions:
//   sqlc v1.22.0
// source: posts.sql

package database

import (
	"context"
	"database/sql"
	"time"
)

const createPost = `-- name: CreatePost :exec
INSERT INTO posts (
  created_at, updated_at, url, feed_id, title, description, published_at
) VALUES (
  ?, ?, ?, ?, ?, ?, ?
)
`

type CreatePostParams struct {
	CreatedAt   time.Time
	UpdatedAt   time.Time
	Url         string
	FeedID      int32
	Title       string
	Description sql.NullString
	PublishedAt time.Time
}

// type: CreatePost
func (q *Queries) CreatePost(ctx context.Context, arg CreatePostParams) error {
	_, err := q.db.ExecContext(ctx, createPost,
		arg.CreatedAt,
		arg.UpdatedAt,
		arg.Url,
		arg.FeedID,
		arg.Title,
		arg.Description,
		arg.PublishedAt,
	)
	return err
}

const getPostsForFeed = `-- name: GetPostsForFeed :many
SELECT id, created_at, updated_at, title, description, published_at, url, feed_id FROM posts WHERE feed_id=?
`

func (q *Queries) GetPostsForFeed(ctx context.Context, feedID int32) ([]Post, error) {
	rows, err := q.db.QueryContext(ctx, getPostsForFeed, feedID)
	if err != nil {
		return nil, err
	}
	defer rows.Close()
	var items []Post
	for rows.Next() {
		var i Post
		if err := rows.Scan(
			&i.ID,
			&i.CreatedAt,
			&i.UpdatedAt,
			&i.Title,
			&i.Description,
			&i.PublishedAt,
			&i.Url,
			&i.FeedID,
		); err != nil {
			return nil, err
		}
		items = append(items, i)
	}
	if err := rows.Close(); err != nil {
		return nil, err
	}
	if err := rows.Err(); err != nil {
		return nil, err
	}
	return items, nil
}

const getPostsForUser = `-- name: GetPostsForUser :many
SELECT posts.id, posts.created_at, posts.updated_at, posts.title, posts.description, posts.published_at, posts.url, posts.feed_id FROM posts 
JOIN feed_follows ON posts.feed_id=feed_follows.feed_id
WHERE feed_follows.user_id=?
ORDER BY posts.published_at LIMIT ?
`

type GetPostsForUserParams struct {
	UserID int32
	Limit  int32
}

func (q *Queries) GetPostsForUser(ctx context.Context, arg GetPostsForUserParams) ([]Post, error) {
	rows, err := q.db.QueryContext(ctx, getPostsForUser, arg.UserID, arg.Limit)
	if err != nil {
		return nil, err
	}
	defer rows.Close()
	var items []Post
	for rows.Next() {
		var i Post
		if err := rows.Scan(
			&i.ID,
			&i.CreatedAt,
			&i.UpdatedAt,
			&i.Title,
			&i.Description,
			&i.PublishedAt,
			&i.Url,
			&i.FeedID,
		); err != nil {
			return nil, err
		}
		items = append(items, i)
	}
	if err := rows.Close(); err != nil {
		return nil, err
	}
	if err := rows.Err(); err != nil {
		return nil, err
	}
	return items, nil
}
